import { useState } from "react";
/* batching по простому это когда Реакт объеденяет несколько изменений несколько изменений состояний в одну опперацию для улучшения производительности
Та же команда setState или комбинация из Хуков всегда пытается скомбинировать все изменения стейта перед тем как их выполнить - это позволяет
делать меньше перерендеринга компонента и экономить ресурсы компа */

function TestComponent() {
    const [count, setCount] = useState(0)
    const [flag, setFlag] = useState(false)

    /* function handleClick() {
        setCount(c => c + 1)
        setFlag(f => !f)
    }
    console.log('render') */
    /* После клика по кнопки next у нас выводится только одно сообщение в консоль. То-есть Реакт понимает что для улучшения производительности,
так как у нас два очень близких изменений стейта по времени, он ОБЪЕДЕНЯЕТ ИЗМЕНЕНИЯ СТЕЙТА В ОДНУ ОППЕРАЦИЮ, по этому только один рендер
Компонента */

    // Но как же с асинхроными операциями
    function handleClick() {
        setTimeout(() => {
            setCount(c => c + 1)
            setFlag(f => !f)
        }, 100)
    }
    console.log('render')
    /* Просиходит Два Рендера, те у нас не происходит автоматический batching и у нас эти команды разделяются. 
    ТЕ идет изменения стейта setCount - потом идет перендер всего что в ретёрне, потом изменения стейта setFlag - и опять перендер структуры*/
    //Заходим в CharList

    return (
        <div> 
            <button onClick={handleClick}>Next</button>
            <h1 style={{color: flag ? 'blue' : 'black'}}>{count}</h1>
        </div>
    )
}
export default TestComponent