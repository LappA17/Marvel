import {lazy, Suspense} from 'react'
/* Метод Лейзи будет испольовать коллбек функцию что бы подгружать какие-то Компоненты */

import {BrowserRouter as Router, Route, Routes} from 'react-router-dom';

//import {MainPage, ComicsPage, SingleComicPage} from '../pages';

import Spinner from '../spinner/Spinner';
import AppHeader from "../appHeader/AppHeader";

//import Page404 from '../pages/404'
/* ВСЕГДА ВСЕ ДИНАМИЧЕСКИЕ ИМПОРТЫ ВСТАВЛЯЕМ ПОСЛЕ СТАТИЧЕСКИХ ИНАЧЕ БУДЕТ ОШИБКА !!! */

/* ПРИЧЕМ ТОТ ПРИЕМ С index.jsx то что мы объеденили все странички у нас остается, потому что кодом ниже мы можем лениво
что-то подгружать, а если вдруг нам страничка где-то просто понадобиться то мы сможем использовать вот этот синтексес
import {MainPage, ComicsPage, SingleComicPage} from '../pages'; по-этому УДАЛЯЕМ ЕГО*/
const Page404 = lazy(() => import('../pages/404'))
const MainPage = lazy(() => import('../pages/MainPage'))
const ComicsPage = lazy(() => import('../pages/ComicsPage'))
const SingleComicPage = lazy(() => import('../pages/SingleComicPage')) 
 /*Такая команда будет подгружать Компонент только тогда когда он 
появится на страничке.
    Но пока что он работать не будет, потому что когда мы в обычном ДжаваСкрипте могли обработать ошибку через блок
catch(). То здесь мы этого сделать не можем + мы рендерим пользователь интерфейс в этот момент
    ПО-ЭТОМУ ВТОРЫМ ОБЯЗАТЕЛЬНЫЙ УСЛОВИЕМ ЯВЛЯЕТСЯ ИСПОЛЬЗОВАНИЕ КОМПОНЕНТА САСПЕНС, КОТОРЫЙ И БУДЕТ ОТВЕЧАТЬ ЗА ОШИБКИ
В ИМПОРТАХ И ЗА ОТОБРОЖЕНИЯ ОСНОВГО СОДЕРЖИМОГО
    НУЖНО ПРОСТО ВСЮ СТУКТУРУ ПОМЕСТИТЬ В Suspense
    ЭТОТ КОМПОНЕНТ ПРИНИМАЕТ В СЕБЯ ОБЯЗАТЕЛЬНЫЙ АТТРИБУТ fallback
    fallback - это запасной Компонент который можно показать пока грузиться динамический импорт
    Мы в fallback помещаем сообщение Loading и когда у нас происходит переход между страницами то у нас на долю секунду
появится это смс
    Для красоты поместим туда Спиннер
    ТЕ ЕСЛИ У НАС БУДЕТ МЕДЛЕННЫЙ ИНТЕРНЕТ, ТО ПРИ ПЕРЕХОДУ НА ДРУГУЮ СТРАНИЦУ НА ДОЛЮ СЕК ПОЯВИТСЯ СПИНЕР

    ТЕПЕРЬ Главную СТРАНИЦу ПОМЕСТИМ В lazy потому что часто пользователь заходит на последнею страницу браузера иил по ссылке
    И так же все страницы
 */

/* Займемся оптимизацией приложения, допустим у нас в проекте 10 страниц и нужно сделать так что бы 9 из них не грузились
в то время как пользователей их не видит
    ВСЁ ЧТО МЫ ДЕЛАЛИ ДО ЭТОГО - ЭТО СТАТИЧЕСКИЕ ИМПОРТЫ, ТЕ МЫ ИМПОРТИРОВАЛИ СТРАНИЦА ПРОСТО В ОДИН ФАЙЛ НАШ app.jsx
и здесь уже собирали проект

    После того как мы в CharList протестили динамический рендеринг мы сейчас займемся таким же методом только у Реакта,
а именно React.lazy. 
    Допустим мы заходим на страничку comics и она отрендериться только тогда когда мы на нее заходим для оптимизации
    Что бы применить React.lazy - Компонент должен именно быть экспортирован по Дефолту !!! 
    
    Мы сейчас будем применяться React.lazy для страницы 404.
    Для начала нужно ее вытащить в отдельный импорт, так как у нас в index.jsx в pages у нас идет ИМЕННОВОНЫЙ ЭКСПОРТ
а не по умолчанию. 

    Перед тем как сделать ленивую подгрузку 404 страницы мы сделаем ТЕСТ. 
    Ваня прописал в терминале npm run build - для того что бы создать полноценный билд для того что бы уже грузить на сервер
    Мы хотим посмотреть сколько файликом будет в билде и сколько будут они весить 
    Ваня зашел в папку с проектом Марвел и посмотрел сколько весит папка с js, и она весит 751кб
    Делаем мы это что бы сравнить то что у нас есть сейчас и уже с оптимизированными данными - ЭТО СПРАШИВАЮТ НА СОБСЕДЕОВАНИЕ
    Так же мы хотим посмотреть какие файлики у нас подгружаются в index.html. Там подгружаются два файлика Чанки(chunk) которые
нам Ваня показывал в папке в Марвел 

    Ваня запускает http-server build(сервер с нашей папкой build). И там в панеле разработчика есть вкладка network
    Здесь можно посмотреть загрузку скриптов, а именно скорость загрузки файлов
    Здесь мы видим два наших Чанка(chunk) которые и формируют работу нашего Реакт приложения 
    
    Теперь мы опять запускаем билд нашего проекта и смотрим что наша папочка js весит 887кб после оптимизации. 
    Такая оптимизация не ведет к тому что будет меньше кода по размеру 
    Так же в папке js кство файлов резко возрасло
    Дело в том что главное не сколько вес файлов и их кство, а то как стало работать наше приложение 
    В нашем Network(http-server build) стало Чанков чуть больше, но как только я перехожу с мейн пейдж на комикс, то
у меня идет не только подгрузка всех изображений, но и еще одного Чанка 
    ТО-ЕСТЬ У НАС ПОСТОЯННО ДОГРУЖАЮТСЯ ОТДЕЛЬНЫЕ КУСОЧКИ ФАЙЛОВ(НАШИ ОТДЕЛЬНЫ КОМПОНЕНТЫ) А НЕ ВСЕ СРАЗУ !!! */
const App = () => {
    return (
        <Router>
            <div className="app">
                <AppHeader/>
                <main>
                    <Suspense fallback={<Spinner/>}>
                        <Routes>
                            <Route path="/" element={<MainPage/>}/>
                            <Route path="/comics" element={<ComicsPage/>}/> 
                            <Route path="/comics/:comicId" element={<SingleComicPage/>}/>
                            <Route path="*" element={<Page404/>}/>                       
                        </Routes>
                    </Suspense>
                </main>
            </div>
        </Router>
    )
}

export default App;